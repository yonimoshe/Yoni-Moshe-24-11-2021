{"version":3,"sources":["components/Navigation/Navigation.js","actions/actions-types.js","actions/actions.js","components/Home/Input/Input.js","components/Home/Current/Current.js","components/Home/Forecast/DayItem/DayItem.js","components/Home/Forecast/Forecast.js","components/Home/Home.js","components/Favorites/CityCard.js","components/Favorites/Favorites.js","App.js","reportWebVitals.js","reducers/currentReducer.js","reducers/forecastReducer.js","reducers/index.js","index.js"],"names":["Navigation","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","className","to","Button","id","undefined","onClick","event","currentTarget","Menu","onClose","MenuListProps","MenuItem","navData","isActive","ActionTypes","fetchCurrentCityWeather","city","cityCode","dispatch","a","axios","get","process","response","iconNumber","data","WeatherIcon","iconUrl","WeatherText","Temperature","Metric","Value","Unit","type","payload","toast","error","position","POSITION","TOP_CENTER","autoClose","console","log","fetchForecastCityWeather","dailyForecast","DailyForecasts","configure","Input","props","setCity","setCityCode","suggestions","setSuggestions","isChoiceMade","setIsChoiceMade","useDispatch","useEffect","inputProps","placeholder","autoComplete","name","value","onChange","_event","newValue","english","test","replace","onSuggestionsFetchRequested","result","map","LocalizedName","key","Key","onSuggestionsClearRequested","onSuggestionSelected","suggestion","method","preventDefault","getSuggestionValue","renderSuggestion","Current","current","useSelector","state","deg","weatherText","src","weatherIcon","temperature","units","DayItem","Card","style","height","CardContent","Typography","variant","component","day","minValue","maxValue","Forecast","forecastArr","forecast","days","singelDay","length","i","push","Grid","item","xs","md","Date","slice","Minimum","Maximum","container","spacing","Home","isFavorite","setIsFavorite","description","cityName","isFave","JSON","parse","localStorage","getItem","findIndex","code","favoritesBtn","fontSize","favs","filter","setItem","stringify","e","alert","color","CityCard","temp","clicked","Favorites","navigate","useNavigate","favorites","setFavorites","favoritesArrayToDisplay","tokan","info","notifyFavoritesError","fetchData","marginTop","el","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducers","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6a603f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport './Navigation.css';\r\n\r\nfunction Navigation() {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n           <header className=\"header-container\">\r\n                   <Link className=\"logo-link\" to=\"/\">Logo</Link>\r\n                  <nav> \r\n                    {/* small size nav handleing    */}\r\n                        <Button\r\n                            id=\"basic-button\"\r\n                            aria-controls=\"basic-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            aria-expanded={open ? 'true' : undefined}\r\n                            onClick={handleClick}\r\n                        >\r\n                            <div className=\"hamburger\">\r\n                                <div className=\"line\"></div>\r\n                                <div className=\"line\"></div>\r\n                                <div className=\"line\"></div>\r\n                            </div>   \r\n                        </Button>\r\n                        <Menu\r\n                            id=\"basic-menu\"\r\n                            anchorEl={anchorEl}\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            MenuListProps={{\r\n                            'aria-labelledby': 'basic-button',\r\n                            }}\r\n                        >\r\n                            <MenuItem onClick={handleClose}>\r\n                                <NavLink className={(navData) =>  navData.isActive ? \"nav-link-active\" : \"nav-link\"} to=\"/\">\r\n                                  Home\r\n                               </NavLink>\r\n                            </MenuItem>\r\n                            <MenuItem onClick={handleClose}> \r\n                                <NavLink className={(navData) =>  navData.isActive ? \"nav-link-active\" : \"nav-link\"} to=\"/favorites\">\r\n                                 Favorites\r\n                                </NavLink>                        \r\n                            </MenuItem>\r\n                        </Menu>\r\n                 \r\n                 {/* large size nav handleing  */}\r\n                   <ul className=\"list-container\">\r\n                       <li>\r\n                           <NavLink className={(navData) =>  navData.isActive ? \"nav-link-active\" : \"nav-link\"} to=\"/\">\r\n                               Home\r\n                           </NavLink>\r\n                       </li>\r\n                       <li>\r\n                           <NavLink className={(navData) =>  navData.isActive ? \"nav-link-active\" : \"nav-link\"} to=\"/favorites\">\r\n                               Favorites\r\n                           </NavLink>\r\n                       </li>\r\n                    </ul>\r\n                   </nav> \r\n           </header>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Navigation;","export const ActionTypes = {\r\n    FETCH_CURRENT_CITY_WEATHER: \"FETCH_CURRENT_CITY_WEATHER\",\r\n    FETCH_FORECAST_CITY_WEATHER: \"FETCH_FORECAST_CITY_WEATHER\"\r\n}","import { ActionTypes } from \"./actions-types\";\r\nimport axios from \"axios\"\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst notifyCurrentError = () => {\r\n  toast.error(\"Oops...Cant fetch current weather, Problem with server conaction... \", {\r\n      position: toast.POSITION.TOP_CENTER,\r\n      autoClose: 2000\r\n  })\r\n}\r\n\r\nconst notifyForecastError = () => {\r\n  toast.error(\"Oops... Cant fetch forecast, Problem with server conaction... \", {\r\n      position: toast.POSITION.TOP_CENTER,\r\n      autoClose: 2000\r\n  })\r\n}\r\n\r\nexport const fetchCurrentCityWeather = (city,cityCode) => {\r\n      let tokan = process.env.REACT_APP_TOKAN_KEY;\r\n      return async (dispatch) => {\r\n        try {\r\n            const response = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${cityCode}?apikey=${tokan}`)\r\n            let iconNumber = response.data[0].WeatherIcon\r\n            let iconUrl = `https://developer.accuweather.com/sites/default/files/${iconNumber}-s.png`;\r\n            if (iconNumber < 10) {\r\n                 iconUrl = `https://developer.accuweather.com/sites/default/files/0${iconNumber}-s.png`;\r\n              }\r\n            const [weatherText,temperature,units] = [response.data[0].WeatherText,response.data[0].Temperature.Metric.Value,response.data[0].Temperature.Metric.Unit];\r\n            dispatch({type: ActionTypes.FETCH_CURRENT_CITY_WEATHER,payload: [temperature,weatherText,city,cityCode,iconUrl,units]})\r\n        } catch (error) {\r\n            notifyCurrentError();\r\n            console.log(error);\r\n        }\r\n      }\r\n}\r\n\r\nexport const fetchForecastCityWeather = (cityCode) => {\r\n      let tokan = process.env.REACT_APP_TOKAN_KEY;  \r\n      return async (dispatch) => {\r\n          try {\r\n            const response = await axios.get( `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityCode}?apikey=${tokan}&metric=true`)\r\n            let dailyForecast = response.data.DailyForecasts;\r\n            dispatch({type: ActionTypes.FETCH_FORECAST_CITY_WEATHER, payload: dailyForecast})\r\n          } catch (error) {\r\n            notifyForecastError();\r\n            console.log(error);\r\n          }\r\n      }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchCurrentCityWeather, fetchForecastCityWeather } from '../../../actions/actions';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport './Input.css';\r\n\r\ntoast.configure();\r\n\r\nfunction Input(props) {\r\n    const [city, setCity] = useState(\"\");\r\n    const [cityCode, setCityCode] = useState(\"\")\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [isChoiceMade, setIsChoiceMade] = useState(false)\r\n    const dispatch = useDispatch();\r\n\r\n    const notify = () => {\r\n        toast.error(\"Sorry... English Please\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 2000\r\n        })\r\n    }\r\n\r\n    const notifySearchError = () => {\r\n        toast.error(\"Cant get Cities from server please try later\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 5000\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n       if (isChoiceMade) {\r\n        dispatch(fetchCurrentCityWeather(city,cityCode));\r\n        dispatch(fetchForecastCityWeather(cityCode));\r\n        setIsChoiceMade(false);\r\n       }\r\n  \r\n    },[city,cityCode])\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCurrentCityWeather(\"Tel-Aviv\",\"215854\"));\r\n        dispatch(fetchForecastCityWeather(\"215854\")); \r\n    },[])\r\n\r\n    let tokan = process.env.REACT_APP_TOKAN_KEY;\r\n    return (\r\n        <div className=\"input-row\">\r\n            <Autosuggest \r\n              inputProps={{\r\n                placeholder: \"Type City\",\r\n                autoComplete: \"abcd\",\r\n                name: \"city\",\r\n                id: \"city\",\r\n                value: city,\r\n                onChange: ((_event, { newValue }) => {\r\n                    let english = /[^A-Za-z\\s]/ig;\r\n                    if (english.test(newValue)) {\r\n                        notify();\r\n                        newValue = newValue.replace(english, '');\r\n                    }\r\n                     setCity(newValue);              \r\n                })\r\n               }}\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={async ({value}) => {\r\n                  if (!value) {\r\n                      setSuggestions([]);\r\n                      return;\r\n                  }\r\n                  try {\r\n                    const result = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?q=${value}&apikey=${tokan}`);\r\n                    setSuggestions(result.data.map( city => ({\r\n                        name: city.LocalizedName,\r\n                        key: city.Key\r\n                    }) ));\r\n                                          \r\n                  } catch (error) {\r\n                      setSuggestions([]);\r\n                      notifySearchError();\r\n                      console.log(error);\r\n                  }\r\n              }} \r\n              onSuggestionsClearRequested={()=> {\r\n                  setSuggestions([]);\r\n              }}\r\n              onSuggestionSelected={(event,{suggestion,method}) => {\r\n                  if (method === \"enter\") {\r\n                      event.preventDefault();\r\n                  }\r\n                  setCity(suggestion.name);\r\n                  setCityCode(suggestion.key);\r\n                  setIsChoiceMade(true)\r\n              }}\r\n              getSuggestionValue={suggestion => suggestion.name}\r\n              renderSuggestion={suggestion => <div>{suggestion.name}</div>}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Current.css';\r\n\r\n\r\nfunction Current(props) {\r\n    let current = useSelector(state => state.current);\r\n    let deg = current.weatherText ? '\\u00b0' : '';\r\n    return (\r\n        <div className=\"current-container\">\r\n            <img src={current.weatherIcon} />\r\n            <div>\r\n              <div>{current.city}</div>\r\n              <span>{`${current.temperature} ${deg}${current.units}`}</span>\r\n            </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Current;","import React from 'react';\r\nimport { Card, Typography, CardContent } from '@material-ui/core';\r\nimport './DayItem.css';\r\n\r\nfunction DayItem(props) {\r\n    return (\r\n        <Card style={{height:\"20vh\"}} className=\"day-card\">\r\n         <CardContent>\r\n          <Typography variant=\"h6\" component=\"div\">\r\n            {props.day}\r\n          </Typography>\r\n          <div className=\"day-card-min-max-container\">\r\n          <Typography variant=\"p\" component=\"div\">\r\n            {`min: ${props.minValue} \\u00b0${props.units}`}\r\n          </Typography>\r\n          <Typography variant=\"p\" component=\"div\">\r\n          {`max: ${props.maxValue} \\u00b0${props.units}`}\r\n          </Typography>\r\n          </div>\r\n         </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default DayItem;","import { Grid } from '@material-ui/core';\r\nimport React from 'react';\r\nimport DayItem from './DayItem/DayItem';\r\nimport { useSelector } from 'react-redux';\r\nimport './Forecast.css';\r\n\r\nfunction Forecast(props) {\r\n  const forecastArr = useSelector(state => state.forecast.days);\r\n  \r\n  let singelDay = [];\r\n  if (forecastArr && forecastArr.length!==0) {\r\n    for (let i = 0; i < forecastArr.length; i++) {\r\n      singelDay.push(<Grid item xs={12} md={2} >\r\n                        <DayItem \r\n                           day={forecastArr[i].Date.slice(5,10)} \r\n                           minValue={forecastArr[i].Temperature.Minimum.Value}\r\n                           maxValue={forecastArr[i].Temperature.Maximum.Value}\r\n                           units={forecastArr[i].Temperature.Maximum.Unit}\r\n                           />\r\n                    </Grid>)  \r\n    }\r\n  }\r\n\r\n    return (\r\n        <Grid className=\"forecast-container\" container spacing={4}>\r\n          <Grid item xs={false} md={1} >         \r\n        </Grid>\r\n            {singelDay}\r\n        <Grid item xs={false} md={1} >         \r\n          </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Forecast;","import React, { useState, useEffect } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport HeartBrokenIcon from '@mui/icons-material/HeartBroken';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Input from './Input/Input';\r\nimport Current from './Current/Current';\r\nimport Forecast from './Forecast/Forecast';\r\nimport './Home.css';\r\n\r\nfunction Home(props) {\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n    let description = useSelector(state => state.current.weatherText);\r\n    let cityName = useSelector(state => state.current.city);\r\n    let cityCode = useSelector(state => state.current.cityCode);\r\n    let forecastState = useSelector(state => state.forecast.days);\r\n  \r\n    useEffect(() => {\r\n       let favs = JSON.parse(localStorage.getItem(\"favorites\"));\r\n       let isFave = favs.findIndex( code => {\r\n                    return code.cityCode === cityCode;\r\n                });\r\n       if (isFave !== -1) {\r\n        setIsFavorite(true)\r\n       }else{\r\n        setIsFavorite(false)\r\n       }\r\n\r\n    },[cityName])\r\n  \r\n    const addToFavorites = () => {\r\n        try {     \r\n          let favs = JSON.parse(localStorage.getItem(\"favorites\"));\r\n          favs.push({city:cityName , cityCode: cityCode})\r\n          localStorage.setItem(\"favorites\", JSON.stringify(favs))\r\n          setIsFavorite(true)\r\n        } catch (e) {\r\n            alert(\"ERR insert in to favorites\");\r\n        }\r\n    }\r\n\r\n    const removeFromFavorites = () => {\r\n        try {     \r\n            let favs = JSON.parse(localStorage.getItem(\"favorites\"));\r\n            favs = favs.filter( item => item.cityCode !== cityCode)\r\n            localStorage.setItem(\"favorites\", JSON.stringify(favs))\r\n            setIsFavorite(false)\r\n          } catch (e) {\r\n              alert(\"ERR delete in to favorites\");\r\n          }\r\n    }\r\n\r\n    let favoritesBtn = isFavorite ?\r\n                       <><HeartBrokenIcon fontSize={'large'} /><button className=\"remove-btn\" onClick={removeFromFavorites}>Remove</button></> :\r\n                       <><FavoriteIcon fontSize={'large'} color={'error'} /><button className=\"add-btn\" onClick={addToFavorites}>Add</button></>\r\n\r\n\r\n    return (\r\n       <> \r\n        <Grid container spacing={false}>\r\n            <Grid className=\"input-container\" item xs={12} >\r\n               <Input />\r\n            </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={false} className=\"main-container\">\r\n            <Grid container xs={12} className=\"btn-icon-current-row\" >\r\n                <Grid className=\"current-container\" item xs={6} >\r\n                  <Current />\r\n                </Grid>\r\n                <Grid className=\"btn-container\" item xs={6} >\r\n                    {(cityName === '' || cityCode ==='') ? \"\" : favoritesBtn}         \r\n                </Grid>\r\n            </Grid> \r\n            <Grid className=\"description-container\" item xs={12}>\r\n                 <h2>{description ? description : \"Not Found\" }</h2>\r\n            </Grid>\r\n         <Forecast />\r\n        </Grid>\r\n       </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Card, Typography, CardContent } from '@material-ui/core';\r\nimport './CityCard.css';\r\n\r\nfunction CityCard({city,cityCode,temp,units,description,clicked}) {\r\n    return (\r\n        <Card onClick={clicked} >\r\n         <CardContent className=\"city-card\">\r\n          <Typography className=\"city-card-title\" variant=\"h5\" component=\"div\">\r\n           {city}\r\n          </Typography>\r\n          <Typography className=\"city-card-temp\" variant=\"h5\" component=\"div\">\r\n          {` ${temp} \\u00b0${units}`}\r\n          </Typography>\r\n          <Typography className=\"city-card-description\" variant=\"h5\" component=\"div\">\r\n           {description}\r\n          </Typography>\r\n        </CardContent>\r\n       </Card>\r\n    );\r\n}\r\n\r\nexport default CityCard;","import React, {useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchCurrentCityWeather, fetchForecastCityWeather} from '../../actions/actions';\r\nimport { Grid } from '@material-ui/core';\r\nimport CityCard from './CityCard';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\ntoast.configure();\r\n\r\nfunction Favorites(props) {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const [favorites, setFavorites] = useState([]);\r\n    let favs = JSON.parse(localStorage.getItem(\"favorites\"));\r\n    let favoritesArrayToDisplay = [];\r\n    let tokan = process.env.REACT_APP_TOKAN_KEY;\r\n\r\n    useEffect(() => {\r\n      async function fetchData() {\r\n         try {\r\n          for (let i = 0; i < favs.length; i++) {\r\n            const response = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${favs[i].cityCode}?apikey=${tokan}`);\r\n            favoritesArrayToDisplay.push({city: favs[i].city, cityCode: favs[i].cityCode ,info : [response.data[0].Temperature.Metric.Value,response.data[0].Temperature.Metric.Unit, response.data[0].WeatherText]})\r\n            if (favs.length-1 === i) {\r\n              setFavorites(favoritesArrayToDisplay);\r\n            }      \r\n          }\r\n         } catch (error) {\r\n           notifyFavoritesError();\r\n           console.log(error);\r\n         }\r\n\r\n      }   \r\n      fetchData();\r\n    },[])\r\n\r\n    const goToChosenCity = (city,cityCode) => {\r\n      dispatch(fetchCurrentCityWeather(city,cityCode));\r\n      dispatch(fetchForecastCityWeather(cityCode));\r\n      navigate('/', {replace: true});\r\n    } \r\n\r\n    const notifyFavoritesError = () => {\r\n      toast.error(\"Oops...Cant fetch Favorites data, Problem with server conaction... \", {\r\n          position: toast.POSITION.TOP_CENTER,\r\n          autoClose: 2000\r\n      })\r\n  }\r\n\r\n    \r\n    return (\r\n        <Grid style={{marginTop: \"1rem\"}} container spacing={4}>\r\n          <Grid item xs={false} md={1} >         \r\n        </Grid>\r\n           {(favs.length!==0 && favorites.length === favs.length) ?   // if\r\n            favorites.map( el => \r\n              <Grid key={el.cityCode+\"@@\"} item xs={12} md={3} > \r\n                                <CityCard \r\n                                  city={el.city} \r\n                                  temp={el.info[0]}\r\n                                  units={el.info[1]}\r\n                                  description={el.info[2]}\r\n                                  clicked={() => goToChosenCity(el.city,el.cityCode)}/>\r\n              </Grid>) :  //else                                  \r\n              <h1>No Favorites Found!</h1>\r\n            }   \r\n          <Grid item xs={false} md={1} >         \r\n        </Grid>\r\n      </Grid>\r\n    );\r\n}\r\n\r\nexport default Favorites;","import React from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Home from './components/Home/Home';\nimport Favorites from './components/Favorites/Favorites';\n\nimport { Routes, Route } from 'react-router-dom';\n\nimport './App.css';\n\nfunction App() {\n\n  // fav array hold the city name and code\n  let favs = JSON.parse(localStorage.getItem(\"favorites\"))\n  if (!favs) {\n    localStorage.setItem(\"favorites\", JSON.stringify([]))\n  }\n \n  return (\n    <div className=\"App\">\n       <Navigation />\n       <main>\n         <Routes>\n           <Route path=\"/\" element={<Home />} />\n           <Route path=\"/favorites\" element={<Favorites />} />\n         </Routes>\n       </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ActionTypes } from \"../actions/actions-types\";\r\n\r\nconst initialState = {\r\n    weatherIcon: '',\r\n    temperature: '',\r\n    weatherText: '',\r\n    city: '',\r\n    cityCode: '',\r\n    units:''\r\n}\r\n\r\nexport const currentReducer = (state = initialState, action) => {\r\n      switch (action.type) {\r\n        case ActionTypes.FETCH_CURRENT_CITY_WEATHER:\r\n            return{...state,\r\n                             temperature: action.payload[0],\r\n                             weatherText: action.payload[1],\r\n                             city: action.payload[2],\r\n                             cityCode: action.payload[3],\r\n                             weatherIcon: action.payload[4],\r\n                             units: action.payload[5]\r\n                            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { ActionTypes } from \"../actions/actions-types\";\r\n\r\nconst initialState = {\r\n    days: [],\r\n    test: true\r\n}\r\n\r\nexport const forecastReducer = (state = initialState, action) => {\r\n      switch (action.type) {\r\n        case ActionTypes.FETCH_FORECAST_CITY_WEATHER:\r\n            return{...state, days: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { currentReducer } from \"./currentReducer\";\r\nimport { forecastReducer } from \"./forecastReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    current: currentReducer, \r\n    forecast: forecastReducer\r\n})\r\n\r\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport reducers from './reducers/index';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers,composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}